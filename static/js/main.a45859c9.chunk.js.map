{"version":3,"sources":["components/File-loading-button.js","components/Error-messages.js","components/Cell.js","facilities/constants.js","components/Canvas.js","facilities/validation.js","App.js","serviceWorker.js","index.js"],"names":["FileLoadingButton","prop","className","type","onChange","event","target","files","file","reader","FileReader","length","readAsText","onload","checkData","result","onClick","form","reset","accept","ErrorMessages","props","errorsList","errors","map","error","key","id","rule","meta","Cell","style","background","s","Option","color","cell","colorsRGB","split","char","concat","charCodeAt","toString","slice","match","RGB","Array","i","reduce","acc","value","parseInt","maxRGB","Math","max","cellBackground","COMMANDS","CANVAS","LINE","RECTANGLE","BUCKET_FILL","ERRORS","noCanvasFound","invalidNumberOfArguments","invalidArguments","invalidFunction","drawLine","canvas","x","y","x1","y1","firstPoint","min","secondPoint","drawCanvas","canvasDimension","width","height","rules","j","forEach","command","drawArguments","Number","drawRectangle","initialColor","pointsQueue","pop","push","bucketFill","Canvas","state","this","setState","nextProps","join","row","rowIndex","cellIndex","Component","VALID","isValid","actionRules","commandArguments","isNaN","valid","canvasArgumentsIsValid","lineRectangleFormatConditions","lineArgumentsIsValid","rectangleArgumentsIsValid","bucketFillFormatCondition","bucketFillArgumentsIsValid","commandDoesNotExist","App","drawingRules","dataFromFile","arrayOfStrings","canvasRule","drawRules","canvasArguments","index","drawingArguments","trim","validationMessage","ruleArguments","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a45859c9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function FileLoadingButton(prop) {\r\n\r\n    const addFile = (event) => {\r\n        if (event.target.files !== ' ') {\r\n\r\n            const file = event.target.files;\r\n            const reader = new FileReader();\r\n            \r\n            if(file.length === 1) {\r\n                \r\n                reader.readAsText(file[0]);\r\n                reader.onload = (event) => {\r\n                    prop.checkData(event.target.result);\r\n                }\r\n            } \r\n        }\r\n    }\r\n\r\n    const reset = (event) => {\r\n\r\n        event.target.form.reset();\r\n    }\r\n\r\n    return (\r\n        <form>\r\n            <label className=\"file-input\">\r\n                <input type=\"file\" onChange={addFile} onClick={reset} accept=\".txt\"/>\r\n                Upload File\r\n            </label>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function ErrorMessages(props) {\r\n    const errorsList = props.errors.map(error => <div className=\"error\" key={`${error.id}${error.rule}`}>\r\n        Error on line {error.rule}: {error.meta}\r\n    </div>)\r\n    return (\r\n        <div className=\"errors-list\">\r\n            {errorsList}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function Cell(props) {\r\n\r\n    const cellBackground = () => {\r\n\r\n        const s = new Option().style;\r\n        s.color = props.cell;\r\n        \r\n        if (props.cell === ' ') {\r\n            return '#ffffff';\r\n        }\r\n\r\n        if ( s.color !== '' ) {\r\n\r\n            return props.cell;\r\n        }\r\n\r\n        const colors = props.cell.split('').map((char) => '00'.concat(char.charCodeAt(0).toString(2)).slice(-6));\r\n        const colorsRGB = colors.map( color => color.match(/.{1,2}/g) );\r\n\r\n        let RGB = Array(3);\r\n        for(let i = 0; i < 3; i++){\r\n\r\n            RGB[i] = colorsRGB.reduce( (acc, value) => acc + parseInt(value[i], 2), 0 );\r\n        }\r\n        const maxRGB = Math.max(...RGB);\r\n        RGB = RGB.map( color => color/maxRGB * 255 );\r\n\r\n        return `rgb(${RGB[0]}, ${RGB[1]}, ${RGB[2]})`;\r\n    }\r\n\r\n    return (\r\n        <div className=\"cell\" style={{ background: cellBackground() }}>\r\n        </div>\r\n    );\r\n}","const COMMANDS = { CANVAS: 'C', LINE: 'L', RECTANGLE: 'R', BUCKET_FILL: 'B' };\r\n\r\nconst ERRORS = { \r\n    noCanvasFound: 1,\r\n    invalidNumberOfArguments: 2,\r\n    invalidArguments: 3,\r\n    invalidFunction: 4,\r\n    };\r\n\r\nexport { COMMANDS, ERRORS };","import React, { Component } from \"react\";\r\n\r\nimport Cell from './Cell';\r\n\r\nimport { COMMANDS } from '../facilities/constants';\r\n\r\nexport const drawLine = (canvas, x, y, x1, y1) => {\r\n    if (x === x1) {\r\n        let firstPoint = Math.min(y, y1);\r\n        const secondPoint = Math.max(y, y1);\r\n        for (; firstPoint <= secondPoint; firstPoint++) {\r\n            canvas[firstPoint][x] = 'x';\r\n        }\r\n    } else {\r\n        let firstPoint = Math.min(x, x1);\r\n        const secondPoint =Math.max(x, x1);\r\n        for (; firstPoint <= secondPoint; firstPoint++) {\r\n        canvas[y][firstPoint] = 'x';\r\n        }\r\n    }\r\n}\r\n\r\nexport const drawRectangle = (canvas, x, y, x1, y1) => {\r\n        \r\n    drawLine(canvas, x, y, x1, y);\r\n    drawLine(canvas, x, y, x, y1);\r\n    drawLine(canvas, x1, y, x1, y1);\r\n    drawLine(canvas, x, y1, x1, y1);\r\n}\r\n\r\nexport const bucketFill = (canvas, x, y, color) => {\r\n    const initialColor = canvas[y][x];\r\n    let pointsQueue = [ {x: x, y: y} ];\r\n    \r\n    while (pointsQueue.length !== 0) {\r\n        const { x, y } = pointsQueue.pop();\r\n        canvas[y][x] = color;\r\n        \r\n        if (y > 0) {\r\n            \r\n            if (canvas[y-1][x] === initialColor) {\r\n                \r\n                pointsQueue.push({x: x, y: y-1});\r\n            }   \r\n        }\r\n        \r\n        if (y < canvas.length - 1) {\r\n            \r\n            if (canvas[y+1][x] === initialColor) {\r\n                \r\n                pointsQueue.push({x: x, y: y+1});\r\n            }   \r\n        }\r\n        \r\n        if (x > 0) {\r\n            \r\n            if (canvas[y][x-1] === initialColor) {\r\n                \r\n                pointsQueue.push({x: x-1, y: y});\r\n            }        \r\n        }\r\n        \r\n        if (x < canvas[0].length - 1) {\r\n            \r\n            if (canvas[y][x+1] === initialColor) {\r\n                \r\n                pointsQueue.push({x: x+1, y: y});\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst drawCanvas = (props) => {\r\n    const { width, height } = props.canvasDimension;\r\n    const rules = props.rules;\r\n\r\n    let canvas = new Array(height);\r\n    for (let i = 0; i < canvas.length; i++) {\r\n      canvas[i] = new Array(width);\r\n\r\n      for (let j = 0; j < width; j++) {\r\n        canvas[i][j] = ' ';\r\n      }\r\n    }\r\n\r\n    rules.forEach( rule => {\r\n        const [ command, ...drawArguments ] = rule;\r\n        \r\n        if (command === COMMANDS.LINE) {\r\n            const x = Number.parseInt(drawArguments[0]) - 1;\r\n            const y = Number.parseInt(drawArguments[1]) - 1;\r\n            const x1 = Number.parseInt(drawArguments[2]) - 1;\r\n            const y1 = Number.parseInt(drawArguments[3]) - 1;\r\n\r\n            drawLine(canvas, x, y, x1, y1);\r\n\r\n        } else if (command === COMMANDS.RECTANGLE) {\r\n            const x = Number.parseInt(drawArguments[0]) - 1;\r\n            const y = Number.parseInt(drawArguments[1]) - 1;\r\n            const x1 = Number.parseInt(drawArguments[2]) - 1;\r\n            const y1 = Number.parseInt(drawArguments[3]) - 1;\r\n\r\n            drawRectangle(canvas, x, y, x1, y1);\r\n\r\n        } else if (command === COMMANDS.BUCKET_FILL) {\r\n            const x = Number.parseInt(drawArguments[0]) - 1;\r\n            const y = Number.parseInt(drawArguments[1]) - 1;\r\n\r\n            bucketFill(canvas, x, y, drawArguments[2]);\r\n        }\r\n    });\r\n\r\n    return canvas;\r\n}\r\n\r\nexport default class Canvas extends Component {\r\n    state = {\r\n        canvas: [],\r\n    };\r\n\r\n    static getDerivedStateFromProps(props) {\r\n    \r\n        return { canvas: drawCanvas(props) };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ canvas: drawCanvas(this.props) });\r\n    }\r\n    \r\n    shouldComponentUpdate(nextProps) {\r\n        if (this.props.rules.join('') !== nextProps.rules.join('')) {\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.setState({ canvas: drawCanvas(this.props) });\r\n    }\r\n    \r\n    render() {\r\n        const canvas = this.state.canvas.map( (row, rowIndex) => <div key={rowIndex} className=\"row\">\r\n            {row.map( (cell, cellIndex) => <Cell key={`${rowIndex}-${cellIndex}`} cell={cell}/>)}\r\n        </div> ) \r\n        return (\r\n            <div className=\"canvas\">\r\n                {canvas}\r\n            </div>\r\n        );\r\n    } \r\n}","import { COMMANDS, ERRORS } from './constants';\r\n\r\nexport const VALID = 'valid';\r\n\r\nexport function isValid (actionRules, width, height) {\r\n    const [ command, ...commandArguments ] = actionRules;\r\n    switch(command) {\r\n        case COMMANDS.CANVAS:\r\n            return canvasArgumentsIsValid(commandArguments);\r\n\r\n        case COMMANDS.LINE:\r\n            return lineArgumentsIsValid(commandArguments, width, height);  \r\n        \r\n        case COMMANDS.RECTANGLE:\r\n            return rectangleArgumentsIsValid(commandArguments, width, height);\r\n\r\n        case COMMANDS.BUCKET_FILL:\r\n            return bucketFillArgumentsIsValid(commandArguments, width, height);\r\n\r\n        default:\r\n            return commandDoesNotExist(command);\r\n      }\r\n\r\n}\r\n\r\nfunction canvasArgumentsIsValid (commandArguments) {\r\n    if (commandArguments.length !== 2) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: `C should have 2 arguments`\r\n        };\r\n\r\n    } else if (\r\n        isNaN(Number.parseInt(commandArguments[0])) || \r\n        isNaN(Number.parseInt(commandArguments[1])) ||\r\n        Number.parseInt(commandArguments[0]) < 1 ||\r\n        Number.parseInt(commandArguments[1]) < 1 ) {\r\n\r\n            return {\r\n                id: ERRORS.invalidArguments,\r\n                meta: `C arguments should have format [number number] (number > 0)`\r\n            };\r\n\r\n    } else {\r\n\r\n        return {\r\n            valid: VALID,\r\n            width: Number.parseInt(commandArguments[0]),\r\n            height: Number.parseInt(commandArguments[1]),\r\n        };\r\n    }\r\n}\r\n\r\nfunction lineArgumentsIsValid (commandArguments, width, height) {\r\n    if (commandArguments.length !== 4) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'L should have 4 arguments'\r\n        };\r\n\r\n    } else if (lineRectangleFormatConditions(commandArguments, width, height)) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `L arguments should have format [x y x1 y1] (x, y, x1, y1 = number; 0 < x, x1 < ${width+1}; 0 < y, y1 < ${height+1})`\r\n        };\r\n\r\n    } else if (\r\n        Number.parseInt(commandArguments[0]) !== Number.parseInt(commandArguments[2]) && \r\n        Number.parseInt(commandArguments[1]) !== Number.parseInt(commandArguments[3])) {\r\n\r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `L can not execute for diagonal lines`\r\n        };\r\n\r\n    } else {\r\n\r\n        return VALID;\r\n    }\r\n}\r\n\r\nfunction rectangleArgumentsIsValid (commandArguments, width, height) {\r\n    if (commandArguments.length !== 4) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'R should have 4 arguments'\r\n        };\r\n\r\n    } else if (lineRectangleFormatConditions(commandArguments, width, height)) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `R arguments should have format [x y x1 y1] (x, y, x1, y1 = number; 0 < x, x1 < ${width+1}; 0 < y, y1 < ${height+1})`\r\n        };\r\n\r\n    } else {\r\n\r\n        return VALID;\r\n    }\r\n}\r\n\r\nfunction bucketFillArgumentsIsValid (commandArguments, width, height) {\r\n    if (commandArguments.length !== 3) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'B should have 3 arguments'\r\n        };\r\n      \r\n    } else if (bucketFillFormatCondition(commandArguments, width, height)) {\r\n\r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `B arguments should have format [x y color] (x, y = number; 0 < x < ${width+1}; 0 < y < ${height+1}; color = singl symbol)`\r\n        };\r\n\r\n    } else {\r\n\r\n        return VALID;\r\n    }\r\n}\r\n\r\nfunction commandDoesNotExist (command) {\r\n    \r\n    return {\r\n        id: ERRORS.invalidFunction,\r\n        meta: `${command} function does not exist`\r\n    };\r\n}\r\n\r\nfunction lineRectangleFormatConditions(commandArguments, width, height) {\r\n\r\n    return isNaN(Number.parseInt(commandArguments[0])) || \r\n    isNaN(Number.parseInt(commandArguments[1])) ||\r\n    isNaN(Number.parseInt(commandArguments[2])) || \r\n    isNaN(Number.parseInt(commandArguments[3])) ||\r\n    \r\n    Number.parseInt(commandArguments[0]) < 1 ||\r\n    Number.parseInt(commandArguments[1]) < 1 ||\r\n    Number.parseInt(commandArguments[2]) < 1 ||\r\n    Number.parseInt(commandArguments[3]) < 1 ||\r\n\r\n    Number.parseInt(commandArguments[0]) > width  ||\r\n    Number.parseInt(commandArguments[1]) > height ||\r\n    Number.parseInt(commandArguments[2]) > width  ||\r\n    Number.parseInt(commandArguments[3]) > height;\r\n}\r\n\r\nfunction bucketFillFormatCondition (commandArguments, width, height) {\r\n\r\n    return isNaN(Number.parseInt(commandArguments[0])) || \r\n    isNaN(Number.parseInt(commandArguments[1])) ||\r\n    \r\n    Number.parseInt(commandArguments[0]) < 1 ||\r\n    Number.parseInt(commandArguments[1]) < 1 ||\r\n\r\n    Number.parseInt(commandArguments[0]) > width  ||\r\n    Number.parseInt(commandArguments[1]) > height ||\r\n    \r\n    commandArguments[2].length < 1\r\n}","import React, { Component } from \"react\";\r\n\r\nimport './App.css';\r\n\r\nimport FileLoadingButton from './components/File-loading-button';\r\nimport ErrorMessages from './components/Error-messages';\r\nimport Canvas from './components/Canvas'\r\n\r\nimport { isValid, VALID } from './facilities/validation';\r\nimport { COMMANDS, ERRORS } from './facilities/constants';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    drawingRules: [],\r\n    errors: [],\r\n    canvasDimension: {\r\n      width: null,\r\n      height: null,\r\n    },\r\n  };\r\n\r\n  checkData = (dataFromFile) => {\r\n    let errors = [];\r\n    const arrayOfStrings = dataFromFile.split('\\n');\r\n    const [canvasRule, ...drawRules] = arrayOfStrings;\r\n    const canvasArguments = canvasRule.split(' ');\r\n\r\n    if (canvasArguments[0] !== COMMANDS.CANVAS) {\r\n\r\n      errors = [...errors, {\r\n        id: ERRORS.noCanvasFound,\r\n        rule: 1,\r\n        meta: `${canvasArguments[0]} shoulde be equal to ${COMMANDS.CANVAS}`\r\n      }];\r\n\r\n    } else {\r\n      const { valid, width, height } = isValid(canvasArguments);\r\n      if (valid === VALID) {\r\n        this.setState({ canvasDimension: {\r\n          width: width, \r\n          height: height\r\n        } });\r\n      }\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      drawRules.forEach( (rule, index)  => {\r\n        const drawingArguments = rule.trim().split(' ');\r\n        \r\n        if (drawingArguments[0] === COMMANDS.CANVAS) {\r\n          errors = [...errors, {\r\n            id: ERRORS.invalidFunction, \r\n            rule: index+2,\r\n            meta: 'canvas is already initialized'\r\n          }];\r\n        } else {\r\n          const { width, height } = this.state.canvasDimension;\r\n          const validationMessage = isValid(drawingArguments, width, height);\r\n        \r\n          if (validationMessage !== VALID) {\r\n            errors = [...errors, {...validationMessage, rule: index+2}];\r\n          }          \r\n        }\r\n      });\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      this.setState({ drawingRules: drawRules.map( ruleArguments => ruleArguments.split(' ') ), errors: [] });\r\n    } else {\r\n      this.setState({ errors: errors, drawingRules: [] });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const { drawingRules, canvasDimension, errors } = this.state;\r\n    const canvas = drawingRules.length ? <Canvas rules={drawingRules} canvasDimension={canvasDimension}/> : <ErrorMessages errors={errors} />\r\n    return (\r\n      <div className=\"container\">\r\n        <FileLoadingButton checkData={this.checkData} />\r\n        {canvas}\r\n      </div>\r\n    );\r\n  } \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}