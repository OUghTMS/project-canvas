{"version":3,"sources":["components/File-loading-button.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["FileLoadingButton","prop","type","onChange","event","file","target","files","reader","FileReader","readAsText","onload","checkData","result","Button","props","action","name","onClick","className","COMMANDS","CANVAS","LINE","RECTANGLE","BUCKET_FILL","App","state","drawingRules","errors","drawCanvas","dataFromFile","setState","arrayOfStrings","split","forEach","string","drawingArguments","length","isNaN","map","this","showErrors","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dda3063.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function FileLoadingButton(prop) {\r\n\r\n    const addFile = (event) => {\r\n        const file = event.target.files;\r\n        const reader = new FileReader();\r\n\r\n        reader.readAsText(file[0]);\r\n        reader.onload = (event) => {\r\n            prop.checkData(event.target.result);\r\n        } \r\n    }\r\n\r\n    return (\r\n        <input type=\"file\" onChange={addFile}/>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function Button(props) {\r\n    \r\n    const { action, name } = props;\r\n    return (\r\n        <button onClick={action} className=\"action-button\">{name}</button>\r\n    );\r\n}","import React, { Component } from \"react\";\n\nimport './App.css';\n\nimport FileLoadingButton from './components/File-loading-button';\nimport Button from './components/Button';\n\nconst COMMANDS = { CANVAS: 'C', LINE: 'L', RECTANGLE: 'R', BUCKET_FILL: 'B' };\n\nexport default class App extends Component {\n  state = {\n    drawingRules: [],\n    errors: [],\n  };\n\n  drawCanvas = () => {\n\n  }\n\n  checkData = (dataFromFile) => {\n    this.setState({ errors: [] });\n\n    let arrayOfStrings = dataFromFile.split('\\n');\n    \n    if(arrayOfStrings[0][0] !== COMMANDS.CANVAS) {\n\n      this.setState({ errors: [ ...this.state.errors, -1] });\n    }\n\n    arrayOfStrings.forEach(string => {\n      const drawingArguments = string.split(' ');\n      \n      if (drawingArguments[0] === COMMANDS.CANVAS) {\n        \n        if (drawingArguments.length !== 3) {\n          this.setState({ errors: [ ...this.state.errors, -3] });\n        } else if (\n          isNaN(drawingArguments[1]-0) || \n          isNaN(drawingArguments[2]-0) ||\n          drawingArguments[1]-0 < 1 ||\n          drawingArguments[2]-0 < 1 ) {\n\n          this.setState({ errors: [ ...this.state.errors, -4] });\n        }\n\n      } else if (drawingArguments[0] === COMMANDS.LINE || drawingArguments[0] === COMMANDS.RECTANGLE) {\n        \n        if (drawingArguments.length !== 5) {\n\n          this.setState({ errors: [ ...this.state.errors, -3] });\n          \n        } else if (            \n          isNaN(drawingArguments[1]-0) || \n          isNaN(drawingArguments[2]-0) ||\n          isNaN(drawingArguments[3]-0) || \n          isNaN(drawingArguments[4]-0) ||\n          drawingArguments[1]-0 < 1 ||\n          drawingArguments[2]-0 < 1 ||\n          drawingArguments[3]-0 < 1 ||\n          drawingArguments[4]-0 < 1 ) {\n          \n          this.setState({ errors: [ ...this.state.errors, -4] });\n        } else if ( \n          drawingArguments[0] === COMMANDS.LINE &&\n          drawingArguments[1] !== drawingArguments[3] && \n          drawingArguments[2] !== drawingArguments[4] ) {\n\n            this.setState({ errors: [ ...this.state.errors, -5] });\n          }\n      \n      } else if (drawingArguments[0] === COMMANDS.BUCKET_FILL) {\n        \n        if (drawingArguments.length !== 4) {\n        \n          this.setState({ errors: [ ...this.state.errors, -3] });\n        \n        } else if (\n            isNaN(drawingArguments[1]-0) || \n            isNaN(drawingArguments[2]-0) ||\n            drawingArguments[1]-0 < 1 ||\n            drawingArguments[2]-0 < 1 ||\n            drawingArguments[3].length !== 1) {\n\n          this.setState({ errors: [ ...this.state.errors, -4] });\n        }\n\n      } else {\n        this.setState({ errors: [ ...this.state.errors, -2] });\n      }\n    });\n\n    if (this.state.errors.length === 0) {\n      this.setState({ drawingRules: arrayOfStrings.map( string => string.split(' ') ) });\n    }\n  }\n\n  \n  render() {\n    const action = this.state.drawingRules? this.drawCanvas : this.showErrors;\n    return (\n      <>\n        <FileLoadingButton checkData={this.checkData} />\n        <Button action={action} name=\"Create Canvas\"/>\n      </>\n    );\n  } \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}