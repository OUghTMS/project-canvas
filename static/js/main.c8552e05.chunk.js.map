{"version":3,"sources":["components/File-loading-button.js","components/Button.js","components/Error-messages.js","facilities/constants.js","facilities/validation.js","App.js","serviceWorker.js","index.js"],"names":["FileLoadingButton","prop","className","type","onChange","event","file","target","files","reader","FileReader","readAsText","onload","checkData","result","Button","props","action","name","onClick","ErrorMessages","errorsList","errors","map","error","key","id","rule","meta","COMMANDS","CANVAS","LINE","RECTANGLE","BUCKET_FILL","ERRORS","noCanvasFound","invalidNumberOfArguments","invalidArguments","invalidFunction","valid","isValid","actionRules","width","height","command","commandArguments","length","isNaN","Number","parseInt","canvasArgumentsIsValide","lineRectangleFormatConditions","lineArgumentsIsValide","rectangleArgumentsIsValide","bucketFillFormatCondition","bucketFillArgumentsIsValide","commandDoesNotExist","App","state","drawingRules","canvas","canvasDimension","drawCanvas","newCanvas","Array","i","setState","drawArguments","drawLine","drawRectangle","bucketFill","x","y","x1","y2","color","dataFromFile","arrayOfStrings","split","canvasRule","drawRules","canvasArguments","forEach","string","index","drawingArguments","validationMessage","ruleArguments","showErrors","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8552e05.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function FileLoadingButton(prop) {\r\n\r\n    const addFile = (event) => {\r\n        const file = event.target.files;\r\n        const reader = new FileReader();\r\n\r\n        reader.readAsText(file[0]);\r\n        reader.onload = (event) => {\r\n            prop.checkData(event.target.result);\r\n        } \r\n    }\r\n\r\n    return (\r\n        <label className=\"file-input\">\r\n            <input type=\"file\" onChange={addFile} />\r\n            Upload File\r\n        </label>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function Button(props) {\r\n    \r\n    const { action, name } = props;\r\n    return (\r\n        <button onClick={action} className=\"action-button\">{name}</button>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function ErrorMessages(props) {\r\n    const errorsList = props.errors.map(error => <div className=\"error\" key={`${error.id}${error.rule}`}>\r\n        Error on line {error.rule}: {error.meta}\r\n    </div>)\r\n    return (\r\n        <div className=\"errors-list\">\r\n            {errorsList}\r\n        </div>\r\n    );\r\n}","const COMMANDS = { CANVAS: 'C', LINE: 'L', RECTANGLE: 'R', BUCKET_FILL: 'B' };\r\n\r\nconst ERRORS = { \r\n    noCanvasFound: 1,\r\n    invalidNumberOfArguments: 2,\r\n    invalidArguments: 3,\r\n    invalidFunction: 4,\r\n    };\r\n\r\nexport { COMMANDS, ERRORS };","import { COMMANDS, ERRORS } from './constants';\r\n\r\nconst valid = 'valid';\r\n\r\nexport function isValid (actionRules, width, height) {\r\n    const [ command, ...commandArguments ] = actionRules;\r\n    switch(command) {\r\n        case COMMANDS.CANVAS:\r\n            return canvasArgumentsIsValide(commandArguments);\r\n\r\n        case COMMANDS.LINE:\r\n            return lineArgumentsIsValide(commandArguments, width, height);  \r\n        \r\n        case COMMANDS.RECTANGLE:\r\n            return rectangleArgumentsIsValide(commandArguments, width, height);\r\n\r\n        case COMMANDS.BUCKET_FILL:\r\n            return bucketFillArgumentsIsValide(commandArguments, width, height);\r\n\r\n        default:\r\n            return commandDoesNotExist(command);\r\n      }\r\n\r\n}\r\n\r\nfunction canvasArgumentsIsValide (commandArguments) {\r\n    if (commandArguments.length !== 2) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: `C should have 2 arguments`\r\n        };\r\n\r\n    } else if (\r\n        isNaN(Number.parseInt(commandArguments[0])) || \r\n        isNaN(Number.parseInt(commandArguments[1])) ||\r\n        Number.parseInt(commandArguments[0]) < 1 ||\r\n        Number.parseInt(commandArguments[1]) < 1 ) {\r\n\r\n            return {\r\n                id: ERRORS.invalidArguments,\r\n                meta: `C arguments should have format [number number] (number > 0)`\r\n            };\r\n\r\n    } else {\r\n\r\n        return {\r\n            valid: valid,\r\n            width: Number.parseInt(commandArguments[0]),\r\n            height: Number.parseInt(commandArguments[1]),\r\n        };\r\n    }\r\n}\r\n\r\nfunction lineArgumentsIsValide (commandArguments, width, height) {\r\n    if (commandArguments.length !== 4) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'L should have 4 arguments'\r\n        };\r\n\r\n    } else if (lineRectangleFormatConditions(commandArguments, width, height)) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `L arguments should have format [x y x1 y1] (x, y, x1, y1 = number; 0 < x, x1 < ${width+1}; 0 < y, y1 < ${height+1})`\r\n        };\r\n\r\n    } else if (commandArguments[0] !== commandArguments[2] && commandArguments[1] !== commandArguments[3]) {\r\n\r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `L can not execute for diagonal lines`\r\n        };\r\n\r\n    } else {\r\n\r\n        return valid;\r\n    }\r\n}\r\n\r\nfunction rectangleArgumentsIsValide (commandArguments, width, height) {\r\n    if (commandArguments.length !== 4) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'R should have 4 arguments'\r\n        };\r\n\r\n    } else if (lineRectangleFormatConditions(commandArguments, width, height)) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `R arguments should have format [x y x1 y1] (x, y, x1, y1 = number; 0 < x, x1 < ${width+1}; 0 < y, y1 < ${height+1})`\r\n        };\r\n\r\n    } else {\r\n\r\n        return valid;\r\n    }\r\n}\r\n\r\nfunction bucketFillArgumentsIsValide (commandArguments, width, height) {\r\n    if (commandArguments.length !== 3) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'B should have 3 arguments'\r\n        };\r\n      \r\n    } else if (bucketFillFormatCondition(commandArguments, width, height)) {\r\n\r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `B arguments should have format [x y color] (x, y = number; 0 < x < ${width+1}; 0 < y < ${height+1}; color = singl symbol)`\r\n        };\r\n\r\n    } else {\r\n\r\n        return valid;\r\n    }\r\n}\r\n\r\nfunction commandDoesNotExist (command) {\r\n    \r\n    return {\r\n        id: ERRORS.invalidFunction,\r\n        meta: `${command} function does not exist`\r\n    };\r\n}\r\n\r\nfunction lineRectangleFormatConditions(commandArguments, width, height) {\r\n\r\n    return isNaN(Number.parseInt(commandArguments[0])) || \r\n    isNaN(Number.parseInt(commandArguments[1])) ||\r\n    isNaN(Number.parseInt(commandArguments[2])) || \r\n    isNaN(Number.parseInt(commandArguments[3])) ||\r\n    \r\n    Number.parseInt(commandArguments[0]) < 1 ||\r\n    Number.parseInt(commandArguments[1]) < 1 ||\r\n    Number.parseInt(commandArguments[2]) < 1 ||\r\n    Number.parseInt(commandArguments[3]) < 1 ||\r\n\r\n    Number.parseInt(commandArguments[0]) > width  ||\r\n    Number.parseInt(commandArguments[1]) > height ||\r\n    Number.parseInt(commandArguments[2]) > width  ||\r\n    Number.parseInt(commandArguments[3]) > height;\r\n}\r\n\r\nfunction bucketFillFormatCondition (commandArguments, width, height) {\r\n\r\n    return isNaN(Number.parseInt(commandArguments[0])) || \r\n    isNaN(Number.parseInt(commandArguments[1])) ||\r\n    \r\n    Number.parseInt(commandArguments[0]) < 1 ||\r\n    Number.parseInt(commandArguments[1]) < 1 ||\r\n\r\n    Number.parseInt(commandArguments[0]) > width  ||\r\n    Number.parseInt(commandArguments[1]) > height ||\r\n    \r\n    commandArguments[2].length !== 1\r\n}","import React, { Component } from \"react\";\r\n\r\nimport './App.css';\r\n\r\nimport FileLoadingButton from './components/File-loading-button';\r\nimport Button from './components/Button';\r\nimport ErrorMessages from './components/Error-messages';\r\n\r\nimport { isValid } from './facilities/validation';\r\nimport { COMMANDS, ERRORS } from './facilities/constants';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    drawingRules: [],\r\n    errors: [],\r\n    canvas: [],\r\n    canvasDimension: {\r\n      width: null,\r\n      height: null,\r\n    },\r\n  };\r\n\r\n  drawCanvas = () => {\r\n    const { drawingRules } = this.state;\r\n    const { width, height } = this.state.canvasDimension;\r\n\r\n    let newCanvas = new Array(height);\r\n    for (let i = 0; i < newCanvas.length; i++) {\r\n      newCanvas[i] = new Array(width);\r\n    }\r\n\r\n    this.setState({ canvas: newCanvas });\r\n    \r\n    for (let i = 1; i < drawingRules.length; i++) {\r\n      \r\n      const [ command, ...drawArguments ] = drawingRules[i];\r\n      \r\n      if (command === COMMANDS.LINE) {\r\n        this.drawLine(...drawArguments);\r\n      } else if (command === COMMANDS.RECTANGLE) {\r\n        this.drawRectangle(...drawArguments);\r\n      } else if (command === COMMANDS.BUCKET_FILL) {\r\n        this.bucketFill(...drawArguments);\r\n      }\r\n    }\r\n  }\r\n\r\n  drawLine = (x, y, x1, y2) => {\r\n\r\n  }\r\n\r\n  drawRectangle = (x, y, x1, y2) => {\r\n\r\n  }\r\n\r\n  bucketFill = (x, y, color) => {\r\n\r\n  }\r\n\r\n  checkData = (dataFromFile) => {\r\n    let errors = [];\r\n    const arrayOfStrings = dataFromFile.split('\\n');\r\n    const [canvasRule, ...drawRules] = arrayOfStrings;\r\n    const canvasArguments = canvasRule.split(' ');\r\n\r\n    if (canvasArguments[0] !== COMMANDS.CANVAS) {\r\n\r\n      errors = [...errors, {\r\n        id: ERRORS.noCanvasFound,\r\n        rule: 1,\r\n        meta: `${canvasArguments[0]} shoulde be equal to ${COMMANDS.CANVAS}`\r\n      }];\r\n\r\n    } else {\r\n      const { valid, width, height } = isValid(canvasArguments);\r\n      if (valid === 'valid') {\r\n        this.setState({ canvasDimension: {\r\n          width: width, \r\n          height: height\r\n        } });\r\n      }\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      drawRules.forEach( (string, index)  => {\r\n        const drawingArguments = string.split(' ');\r\n        \r\n        if (drawingArguments[0] === COMMANDS.CANVAS) {\r\n          errors = [...errors, {\r\n            id: ERRORS.invalidFunction, \r\n            rule: index+2,\r\n            meta: 'canvas is already initialized'\r\n          }];\r\n        } else {\r\n          const { width, height } = this.state.canvasDimension;\r\n          const validationMessage = isValid(drawingArguments, width, height);\r\n        \r\n          if (validationMessage !== 'valid') {\r\n            errors = [...errors, {...validationMessage, rule: index+2}];\r\n          }          \r\n        }\r\n      });\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      this.setState({ drawingRules: drawRules.map( ruleArguments => ruleArguments.split(' ') ) });\r\n    } else {\r\n      this.setState({ errors: errors });\r\n    }\r\n  }\r\n\r\n  showErrors = () => {\r\n    console.log(this.state.errors);\r\n  }\r\n  \r\n  render() {\r\n    const action = this.state.drawingRules.length ? this.drawCanvas : this.showErrors;\r\n    return (\r\n      <>\r\n        <FileLoadingButton checkData={this.checkData} />\r\n        <Button action={action} name=\"Create Canvas\"/>\r\n        <ErrorMessages errors={this.state.errors} />\r\n      </>\r\n    );\r\n  } \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}