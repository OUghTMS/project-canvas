{"version":3,"sources":["components/File-loading-button.js","components/Error-messages.js","components/Cell.js","facilities/constants.js","components/Canvas.js","facilities/validation.js","App.js","serviceWorker.js","index.js"],"names":["FileLoadingButton","prop","className","type","onChange","event","file","target","files","reader","FileReader","readAsText","onload","checkData","result","ErrorMessages","props","errorsList","errors","map","error","key","id","rule","meta","Cell","cell","COMMANDS","CANVAS","LINE","RECTANGLE","BUCKET_FILL","ERRORS","noCanvasFound","invalidNumberOfArguments","invalidArguments","invalidFunction","Canvas","state","canvas","drawLine","x","y","x1","y1","firstPoint","Math","min","secondPoint","max","drawRectangle","bucketFill","color","initialColor","length","this","canvasDimension","width","height","rules","Array","i","j","command","drawArguments","Number","parseInt","setState","row","rowIndex","cellIndex","PureComponent","VALID","isValid","actionRules","commandArguments","isNaN","valid","canvasArgumentsIsValid","lineRectangleFormatConditions","lineArgumentsIsValid","rectangleArgumentsIsValid","bucketFillFormatCondition","bucketFillArgumentsIsValid","commandDoesNotExist","App","drawingRules","dataFromFile","arrayOfStrings","split","canvasRule","drawRules","canvasArguments","forEach","string","index","drawingArguments","validationMessage","ruleArguments","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAEe,SAASA,EAAkBC,GAYtC,OACI,2BAAOC,UAAU,cACb,2BAAOC,KAAK,OAAOC,SAZX,SAACC,GACb,IAAMC,EAAOD,EAAME,OAAOC,MACpBC,EAAS,IAAIC,WAEnBD,EAAOE,WAAWL,EAAK,IACvBG,EAAOG,OAAS,SAACP,GACbJ,EAAKY,UAAUR,EAAME,OAAOO,YAKhC,eCbO,SAASC,EAAcC,GAClC,IAAMC,EAAaD,EAAME,OAAOC,KAAI,SAAAC,GAAK,OAAI,yBAAKlB,UAAU,QAAQmB,IAAG,UAAKD,EAAME,IAAX,OAAgBF,EAAMG,OAAhD,iBAC1BH,EAAMG,KADoB,KACZH,EAAMI,SAEvC,OACI,yBAAKtB,UAAU,eACVe,GCNE,SAASQ,EAAKT,GACzB,OACI,yBAAKd,UAAU,QACVc,EAAMU,MCLnB,IAAMC,EAAW,CAAEC,OAAQ,IAAKC,KAAM,IAAKC,UAAW,IAAKC,YAAa,KAElEC,EAAS,CACXC,cAAe,EACfC,yBAA0B,EAC1BC,iBAAkB,EAClBC,gBAAiB,GCAAC,E,2MACjBC,MAAQ,CACJC,OAAQ,I,EA+CZC,SAAW,SAACD,EAAQE,EAAGC,EAAGC,EAAIC,GAC1B,GAAIH,IAAME,EAGN,IAFA,IAAIE,EAAaC,KAAKC,IAAIL,EAAGE,GACvBI,EAAcF,KAAKG,IAAIP,EAAGE,GACzBC,GAAcG,EAAaH,IAC9BN,EAAOM,GAAYJ,GAAK,SAK9B,IAFA,IAAII,EAAaC,KAAKC,IAAIN,EAAGE,GACvBK,EAAaF,KAAKG,IAAIR,EAAGE,GACxBE,GAAcG,EAAaH,IAChCN,EAAOG,GAAGG,GAAc,K,EAKhCK,cAAgB,SAACX,EAAQE,EAAGC,EAAGC,EAAIC,GAE/B,EAAKJ,SAASD,EAAQE,EAAGC,EAAGC,EAAID,GAChC,EAAKF,SAASD,EAAQE,EAAGC,EAAGD,EAAGG,GAC/B,EAAKJ,SAASD,EAAQI,EAAID,EAAGC,EAAIC,GACjC,EAAKJ,SAASD,EAAQE,EAAGG,EAAID,EAAIC,I,EAGrCO,WAAa,SAACZ,EAAQE,EAAGC,EAAGU,GACxB,IAAMC,EAAed,EAAOG,GAAGD,GAC/BF,EAAOG,GAAGD,GAAKW,EAEXV,EAAI,GAEAH,EAAOG,EAAE,GAAGD,KAAOY,GAEnB,EAAKF,WAAWZ,EAAQE,EAAGC,EAAE,EAAGU,GAIpCV,EAAIH,EAAOe,OAAS,GAEhBf,EAAOG,EAAE,GAAGD,KAAOY,GAEnB,EAAKF,WAAWZ,EAAQE,EAAGC,EAAE,EAAGU,GAIpCX,EAAI,GAEAF,EAAOG,GAAGD,EAAE,KAAOY,GAEnB,EAAKF,WAAWZ,EAAQE,EAAE,EAAGC,EAAGU,GAIpCX,EAAIF,EAAO,GAAGe,OAAS,GAEnBf,EAAOG,GAAGD,EAAE,KAAOY,GAEnB,EAAKF,WAAWZ,EAAQE,EAAE,EAAGC,EAAGU,I,mFA/FxC,IALiB,IAAD,EACUG,KAAKvC,MAAMwC,gBAA7BC,EADQ,EACRA,MAAOC,EADC,EACDA,OACTC,EAAQJ,KAAKvC,MAAM2C,MAErBpB,EAAS,IAAIqB,MAAMF,GACdG,EAAI,EAAGA,EAAItB,EAAOe,OAAQO,IAAK,CACtCtB,EAAOsB,GAAK,IAAID,MAAMH,GAEtB,IAAK,IAAIK,EAAI,EAAGA,EAAIL,EAAOK,IACzBvB,EAAOsB,GAAGC,GAAK,IAInB,IAAK,IAAID,EAAI,EAAGA,EAAIF,EAAML,OAAQO,IAAK,CAAC,IAAD,cAEGF,EAAME,IAApCE,EAF2B,KAEfC,EAFe,WAInC,GAAID,IAAYpC,EAASE,KAAM,CAC3B,IAAMY,EAAIwB,OAAOC,SAASF,EAAc,IAAM,EACxCtB,EAAIuB,OAAOC,SAASF,EAAc,IAAM,EACxCrB,EAAKsB,OAAOC,SAASF,EAAc,IAAM,EACzCpB,EAAKqB,OAAOC,SAASF,EAAc,IAAM,EAE/CT,KAAKf,SAASD,EAAQE,EAAGC,EAAGC,EAAIC,QAE7B,GAAImB,IAAYpC,EAASG,UAAW,CACvC,IAAMW,EAAIwB,OAAOC,SAASF,EAAc,IAAM,EACxCtB,EAAIuB,OAAOC,SAASF,EAAc,IAAM,EACxCrB,EAAKsB,OAAOC,SAASF,EAAc,IAAM,EACzCpB,EAAKqB,OAAOC,SAASF,EAAc,IAAM,EAE/CT,KAAKL,cAAcX,EAAQE,EAAGC,EAAGC,EAAIC,QAElC,GAAImB,IAAYpC,EAASI,YAAa,CACzC,IAAMU,EAAIwB,OAAOC,SAASF,EAAc,IAAM,EACxCtB,EAAIuB,OAAOC,SAASF,EAAc,IAAM,EAE9CT,KAAKJ,WAAWZ,EAAQE,EAAGC,EAAGsB,EAAc,KAIpDT,KAAKY,SAAS,CAAE5B,OAAQA,M,+BAiExB,IAAMA,EAASgB,KAAKjB,MAAMC,OAAOpB,KAAK,SAACiD,EAAKC,GAAN,OAAmB,yBAAKhD,IAAKgD,EAAUnE,UAAU,OAClFkE,EAAIjD,KAAK,SAACO,EAAM4C,GAAP,OAAqB,kBAAC7C,EAAD,CAAMJ,IAAG,UAAKgD,EAAL,YAAiBC,GAAa5C,KAAMA,WAEpF,OACI,yBAAKxB,UAAU,UACVqC,O,GApHuBgC,iBCJvBC,EAAQ,QAEd,SAASC,EAASC,EAAajB,EAAOC,GAAS,IAAD,cACRgB,GAAjCX,EADyC,KAC7BY,EAD6B,WAEjD,OAAOZ,GACH,KAAKpC,EAASC,OACV,OAiBZ,SAAiC+C,GAC7B,OAAgC,IAA5BA,EAAiBrB,OAEV,CACHhC,GAAIU,EAAOE,yBACXV,KAAK,6BAIToD,MAAMX,OAAOC,SAASS,EAAiB,MACvCC,MAAMX,OAAOC,SAASS,EAAiB,MACvCV,OAAOC,SAASS,EAAiB,IAAM,GACvCV,OAAOC,SAASS,EAAiB,IAAM,EAE5B,CACHrD,GAAIU,EAAOG,iBACXX,KAAK,+DAKN,CACHqD,MAAOL,EACPf,MAAOQ,OAAOC,SAASS,EAAiB,IACxCjB,OAAQO,OAAOC,SAASS,EAAiB,KAzClCG,CAAuBH,GAElC,KAAKhD,EAASE,KACV,OA2CZ,SAA+B8C,EAAkBlB,EAAOC,GACpD,OAAgC,IAA5BiB,EAAiBrB,OAEV,CACHhC,GAAIU,EAAOE,yBACXV,KAAM,6BAGHuD,EAA8BJ,EAAkBlB,EAAOC,GAEvD,CACHpC,GAAIU,EAAOG,iBACXX,KAAK,kFAAD,OAAoFiC,EAAM,EAA1F,yBAA4GC,EAAO,EAAnH,MAGDiB,EAAiB,KAAOA,EAAiB,IAAMA,EAAiB,KAAOA,EAAiB,GAExF,CACHrD,GAAIU,EAAOG,iBACXX,KAAK,wCAKFgD,EAnEIQ,CAAqBL,EAAkBlB,EAAOC,GAEzD,KAAK/B,EAASG,UACV,OAoEZ,SAAoC6C,EAAkBlB,EAAOC,GACzD,OAAgC,IAA5BiB,EAAiBrB,OAEV,CACHhC,GAAIU,EAAOE,yBACXV,KAAM,6BAGHuD,EAA8BJ,EAAkBlB,EAAOC,GAEvD,CACHpC,GAAIU,EAAOG,iBACXX,KAAK,kFAAD,OAAoFiC,EAAM,EAA1F,yBAA4GC,EAAO,EAAnH,MAKDc,EArFIS,CAA0BN,EAAkBlB,EAAOC,GAE9D,KAAK/B,EAASI,YACV,OAsFZ,SAAqC4C,EAAkBlB,EAAOC,GAC1D,OAAgC,IAA5BiB,EAAiBrB,OAEV,CACHhC,GAAIU,EAAOE,yBACXV,KAAM,6BA0ClB,SAAoCmD,EAAkBlB,EAAOC,GAEzD,OAAOkB,MAAMX,OAAOC,SAASS,EAAiB,MAC9CC,MAAMX,OAAOC,SAASS,EAAiB,MAEvCV,OAAOC,SAASS,EAAiB,IAAM,GACvCV,OAAOC,SAASS,EAAiB,IAAM,GAEvCV,OAAOC,SAASS,EAAiB,IAAMlB,GACvCQ,OAAOC,SAASS,EAAiB,IAAMjB,GAEvCiB,EAAiB,GAAGrB,OAAS,EAlDlB4B,CAA0BP,EAAkBlB,EAAOC,GAEnD,CACHpC,GAAIU,EAAOG,iBACXX,KAAK,sEAAD,OAAwEiC,EAAM,EAA9E,qBAA4FC,EAAO,EAAnG,4BAKDc,EAvGIW,CAA2BR,EAAkBlB,EAAOC,GAE/D,QACI,OAwGZ,SAA8BK,GAE1B,MAAO,CACHzC,GAAIU,EAAOI,gBACXZ,KAAK,GAAD,OAAKuC,EAAL,6BA5GOqB,CAAoBrB,IAgHvC,SAASgB,EAA8BJ,EAAkBlB,EAAOC,GAE5D,OAAOkB,MAAMX,OAAOC,SAASS,EAAiB,MAC9CC,MAAMX,OAAOC,SAASS,EAAiB,MACvCC,MAAMX,OAAOC,SAASS,EAAiB,MACvCC,MAAMX,OAAOC,SAASS,EAAiB,MAEvCV,OAAOC,SAASS,EAAiB,IAAM,GACvCV,OAAOC,SAASS,EAAiB,IAAM,GACvCV,OAAOC,SAASS,EAAiB,IAAM,GACvCV,OAAOC,SAASS,EAAiB,IAAM,GAEvCV,OAAOC,SAASS,EAAiB,IAAMlB,GACvCQ,OAAOC,SAASS,EAAiB,IAAMjB,GACvCO,OAAOC,SAASS,EAAiB,IAAMlB,GACvCQ,OAAOC,SAASS,EAAiB,IAAMjB,E,6kBCxItB2B,E,2MACnB/C,MAAQ,CACNgD,aAAc,GACdpE,OAAQ,GACRsC,gBAAiB,CACfC,MAAO,KACPC,OAAQ,O,EAIZ7C,UAAY,SAAC0E,GACX,IAAIrE,EAAS,GACPsE,EAAiBD,EAAaE,MAAM,MAFd,cAGOD,GAA5BE,EAHqB,KAGNC,EAHM,WAItBC,EAAkBF,EAAWD,MAAM,KAEzC,GAAIG,EAAgB,KAAOjE,EAASC,OAElCV,EAAM,sBAAOA,GAAP,CAAe,CACnBI,GAAIU,EAAOC,cACXV,KAAM,EACNC,KAAK,GAAD,OAAKoE,EAAgB,GAArB,gCAA+CjE,EAASC,eAGzD,CAAC,IAAD,EAC4B6C,EAAQmB,GAAjCf,EADH,EACGA,MAAOpB,EADV,EACUA,MAAOC,EADjB,EACiBA,OAClBmB,IAAUL,GACZ,EAAKL,SAAS,CAAEX,gBAAiB,CAC/BC,MAAOA,EACPC,OAAQA,KAKQ,IAAlBxC,EAAOoC,QACTqC,EAAUE,SAAS,SAACC,EAAQC,GAC1B,IAAMC,EAAmBF,EAAOL,MAAM,KAEtC,GAAIO,EAAiB,KAAOrE,EAASC,OACnCV,EAAM,sBAAOA,GAAP,CAAe,CACnBI,GAAIU,EAAOI,gBACXb,KAAMwE,EAAM,EACZvE,KAAM,uCAEH,CAAC,IAAD,EACqB,EAAKc,MAAMkB,gBAC/ByC,EAAoBxB,EAAQuB,EAF7B,EACGvC,MADH,EACUC,QAGXuC,IAAsBzB,IACxBtD,EAAM,sBAAOA,GAAP,MAAmB+E,EAAnB,CAAsC1E,KAAMwE,EAAM,WAM1C,IAAlB7E,EAAOoC,OACT,EAAKa,SAAS,CAAEmB,aAAcK,EAAUxE,KAAK,SAAA+E,GAAa,OAAIA,EAAcT,MAAM,UAElF,EAAKtB,SAAS,CAAEjD,OAAQA,K,wEAIlB,IAAD,EAC2CqC,KAAKjB,MAA/CgD,EADD,EACCA,aAAc9B,EADf,EACeA,gBAAiBtC,EADhC,EACgCA,OACjCqB,EAAS+C,EAAahC,OAAS,kBAAC,EAAD,CAAQK,MAAO2B,EAAc9B,gBAAiBA,IAAqB,kBAACzC,EAAD,CAAeG,OAAQA,IAC/H,OACE,yBAAKhB,UAAU,aACb,kBAACF,EAAD,CAAmBa,UAAW0C,KAAK1C,YAClC0B,O,GApEwB4D,aCCbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.18f05fcd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function FileLoadingButton(prop) {\r\n\r\n    const addFile = (event) => {\r\n        const file = event.target.files;\r\n        const reader = new FileReader();\r\n\r\n        reader.readAsText(file[0]);\r\n        reader.onload = (event) => {\r\n            prop.checkData(event.target.result);\r\n        } \r\n    }\r\n\r\n    return (\r\n        <label className=\"file-input\">\r\n            <input type=\"file\" onChange={addFile} />\r\n            Upload File\r\n        </label>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function ErrorMessages(props) {\r\n    const errorsList = props.errors.map(error => <div className=\"error\" key={`${error.id}${error.rule}`}>\r\n        Error on line {error.rule}: {error.meta}\r\n    </div>)\r\n    return (\r\n        <div className=\"errors-list\">\r\n            {errorsList}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function Cell(props) {\r\n    return (\r\n        <div className='cell'>\r\n            {props.cell}\r\n        </div>\r\n    );\r\n}","const COMMANDS = { CANVAS: 'C', LINE: 'L', RECTANGLE: 'R', BUCKET_FILL: 'B' };\r\n\r\nconst ERRORS = { \r\n    noCanvasFound: 1,\r\n    invalidNumberOfArguments: 2,\r\n    invalidArguments: 3,\r\n    invalidFunction: 4,\r\n    };\r\n\r\nexport { COMMANDS, ERRORS };","import React, { PureComponent } from \"react\";\r\n\r\nimport Cell from './Cell';\r\n\r\nimport { COMMANDS } from '../facilities/constants';\r\n\r\nexport default class Canvas extends PureComponent {\r\n    state = {\r\n        canvas: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { width, height } = this.props.canvasDimension;\r\n        const rules = this.props.rules;\r\n\r\n        let canvas = new Array(height);\r\n        for (let i = 0; i < canvas.length; i++) {\r\n          canvas[i] = new Array(width);\r\n\r\n          for (let j = 0; j < width; j++) {\r\n            canvas[i][j] = ' ';\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < rules.length; i++) {\r\n      \r\n            const [ command, ...drawArguments ] = rules[i];\r\n            \r\n            if (command === COMMANDS.LINE) {\r\n                const x = Number.parseInt(drawArguments[0]) - 1;\r\n                const y = Number.parseInt(drawArguments[1]) - 1;\r\n                const x1 = Number.parseInt(drawArguments[2]) - 1;\r\n                const y1 = Number.parseInt(drawArguments[3]) - 1;\r\n\r\n                this.drawLine(canvas, x, y, x1, y1);\r\n\r\n            } else if (command === COMMANDS.RECTANGLE) {\r\n                const x = Number.parseInt(drawArguments[0]) - 1;\r\n                const y = Number.parseInt(drawArguments[1]) - 1;\r\n                const x1 = Number.parseInt(drawArguments[2]) - 1;\r\n                const y1 = Number.parseInt(drawArguments[3]) - 1;\r\n\r\n                this.drawRectangle(canvas, x, y, x1, y1);\r\n\r\n            } else if (command === COMMANDS.BUCKET_FILL) {\r\n                const x = Number.parseInt(drawArguments[0]) - 1;\r\n                const y = Number.parseInt(drawArguments[1]) - 1;\r\n\r\n                this.bucketFill(canvas, x, y, drawArguments[2]);\r\n            }\r\n        }\r\n\r\n        this.setState({ canvas: canvas})\r\n    }\r\n\r\n    drawLine = (canvas, x, y, x1, y1) => {\r\n        if (x === x1) {\r\n            let firstPoint = Math.min(y, y1);\r\n            const secondPoint = Math.max(y, y1);\r\n            for (; firstPoint <= secondPoint; firstPoint++) {\r\n                canvas[firstPoint][x] = 'x';\r\n            }\r\n        } else {\r\n          let firstPoint = Math.min(x, x1);\r\n          const secondPoint =Math.max(x, x1);\r\n          for (; firstPoint <= secondPoint; firstPoint++) {\r\n            canvas[y][firstPoint] = 'x';\r\n          }\r\n        }\r\n    }\r\n\r\n    drawRectangle = (canvas, x, y, x1, y1) => {\r\n        \r\n        this.drawLine(canvas, x, y, x1, y);\r\n        this.drawLine(canvas, x, y, x, y1);\r\n        this.drawLine(canvas, x1, y, x1, y1);\r\n        this.drawLine(canvas, x, y1, x1, y1);\r\n    }\r\n\r\n    bucketFill = (canvas, x, y, color) => {\r\n        const initialColor = canvas[y][x];\r\n        canvas[y][x] = color;\r\n\r\n        if (y > 0) {\r\n\r\n            if (canvas[y-1][x] === initialColor) {\r\n    \r\n                this.bucketFill(canvas, x, y-1, color);\r\n            }   \r\n        }\r\n\r\n        if (y < canvas.length - 1) {\r\n\r\n            if (canvas[y+1][x] === initialColor) {\r\n    \r\n                this.bucketFill(canvas, x, y+1, color);\r\n            }   \r\n        }\r\n\r\n        if (x > 0) {\r\n\r\n            if (canvas[y][x-1] === initialColor) {\r\n    \r\n                this.bucketFill(canvas, x-1, y, color);\r\n            }        \r\n        }\r\n\r\n        if (x < canvas[0].length - 1) {\r\n\r\n            if (canvas[y][x+1] === initialColor) {\r\n    \r\n                this.bucketFill(canvas, x+1, y, color);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const canvas = this.state.canvas.map( (row, rowIndex) => <div key={rowIndex} className=\"row\">\r\n            {row.map( (cell, cellIndex) => <Cell key={`${rowIndex}-${cellIndex}`} cell={cell}/>)}\r\n        </div> ) \r\n    return (\r\n        <div className=\"canvas\">\r\n            {canvas}\r\n        </div>\r\n    );\r\n    } \r\n}","import { COMMANDS, ERRORS } from './constants';\r\n\r\nexport const VALID = 'valid';\r\n\r\nexport function isValid (actionRules, width, height) {\r\n    const [ command, ...commandArguments ] = actionRules;\r\n    switch(command) {\r\n        case COMMANDS.CANVAS:\r\n            return canvasArgumentsIsValid(commandArguments);\r\n\r\n        case COMMANDS.LINE:\r\n            return lineArgumentsIsValid(commandArguments, width, height);  \r\n        \r\n        case COMMANDS.RECTANGLE:\r\n            return rectangleArgumentsIsValid(commandArguments, width, height);\r\n\r\n        case COMMANDS.BUCKET_FILL:\r\n            return bucketFillArgumentsIsValid(commandArguments, width, height);\r\n\r\n        default:\r\n            return commandDoesNotExist(command);\r\n      }\r\n\r\n}\r\n\r\nfunction canvasArgumentsIsValid (commandArguments) {\r\n    if (commandArguments.length !== 2) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: `C should have 2 arguments`\r\n        };\r\n\r\n    } else if (\r\n        isNaN(Number.parseInt(commandArguments[0])) || \r\n        isNaN(Number.parseInt(commandArguments[1])) ||\r\n        Number.parseInt(commandArguments[0]) < 1 ||\r\n        Number.parseInt(commandArguments[1]) < 1 ) {\r\n\r\n            return {\r\n                id: ERRORS.invalidArguments,\r\n                meta: `C arguments should have format [number number] (number > 0)`\r\n            };\r\n\r\n    } else {\r\n\r\n        return {\r\n            valid: VALID,\r\n            width: Number.parseInt(commandArguments[0]),\r\n            height: Number.parseInt(commandArguments[1]),\r\n        };\r\n    }\r\n}\r\n\r\nfunction lineArgumentsIsValid (commandArguments, width, height) {\r\n    if (commandArguments.length !== 4) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'L should have 4 arguments'\r\n        };\r\n\r\n    } else if (lineRectangleFormatConditions(commandArguments, width, height)) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `L arguments should have format [x y x1 y1] (x, y, x1, y1 = number; 0 < x, x1 < ${width+1}; 0 < y, y1 < ${height+1})`\r\n        };\r\n\r\n    } else if (commandArguments[0] !== commandArguments[2] && commandArguments[1] !== commandArguments[3]) {\r\n\r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `L can not execute for diagonal lines`\r\n        };\r\n\r\n    } else {\r\n\r\n        return VALID;\r\n    }\r\n}\r\n\r\nfunction rectangleArgumentsIsValid (commandArguments, width, height) {\r\n    if (commandArguments.length !== 4) {\r\n\r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'R should have 4 arguments'\r\n        };\r\n\r\n    } else if (lineRectangleFormatConditions(commandArguments, width, height)) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `R arguments should have format [x y x1 y1] (x, y, x1, y1 = number; 0 < x, x1 < ${width+1}; 0 < y, y1 < ${height+1})`\r\n        };\r\n\r\n    } else {\r\n\r\n        return VALID;\r\n    }\r\n}\r\n\r\nfunction bucketFillArgumentsIsValid (commandArguments, width, height) {\r\n    if (commandArguments.length !== 3) {\r\n        \r\n        return {\r\n            id: ERRORS.invalidNumberOfArguments,\r\n            meta: 'B should have 3 arguments'\r\n        };\r\n      \r\n    } else if (bucketFillFormatCondition(commandArguments, width, height)) {\r\n\r\n        return {\r\n            id: ERRORS.invalidArguments,\r\n            meta: `B arguments should have format [x y color] (x, y = number; 0 < x < ${width+1}; 0 < y < ${height+1}; color = singl symbol)`\r\n        };\r\n\r\n    } else {\r\n\r\n        return VALID;\r\n    }\r\n}\r\n\r\nfunction commandDoesNotExist (command) {\r\n    \r\n    return {\r\n        id: ERRORS.invalidFunction,\r\n        meta: `${command} function does not exist`\r\n    };\r\n}\r\n\r\nfunction lineRectangleFormatConditions(commandArguments, width, height) {\r\n\r\n    return isNaN(Number.parseInt(commandArguments[0])) || \r\n    isNaN(Number.parseInt(commandArguments[1])) ||\r\n    isNaN(Number.parseInt(commandArguments[2])) || \r\n    isNaN(Number.parseInt(commandArguments[3])) ||\r\n    \r\n    Number.parseInt(commandArguments[0]) < 1 ||\r\n    Number.parseInt(commandArguments[1]) < 1 ||\r\n    Number.parseInt(commandArguments[2]) < 1 ||\r\n    Number.parseInt(commandArguments[3]) < 1 ||\r\n\r\n    Number.parseInt(commandArguments[0]) > width  ||\r\n    Number.parseInt(commandArguments[1]) > height ||\r\n    Number.parseInt(commandArguments[2]) > width  ||\r\n    Number.parseInt(commandArguments[3]) > height;\r\n}\r\n\r\nfunction bucketFillFormatCondition (commandArguments, width, height) {\r\n\r\n    return isNaN(Number.parseInt(commandArguments[0])) || \r\n    isNaN(Number.parseInt(commandArguments[1])) ||\r\n    \r\n    Number.parseInt(commandArguments[0]) < 1 ||\r\n    Number.parseInt(commandArguments[1]) < 1 ||\r\n\r\n    Number.parseInt(commandArguments[0]) > width  ||\r\n    Number.parseInt(commandArguments[1]) > height ||\r\n    \r\n    commandArguments[2].length < 1\r\n}","import React, { Component } from \"react\";\r\n\r\nimport './App.css';\r\n\r\nimport FileLoadingButton from './components/File-loading-button';\r\nimport ErrorMessages from './components/Error-messages';\r\nimport Canvas from './components/Canvas'\r\n\r\nimport { isValid, VALID } from './facilities/validation';\r\nimport { COMMANDS, ERRORS } from './facilities/constants';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    drawingRules: [],\r\n    errors: [],\r\n    canvasDimension: {\r\n      width: null,\r\n      height: null,\r\n    },\r\n  };\r\n\r\n  checkData = (dataFromFile) => {\r\n    let errors = [];\r\n    const arrayOfStrings = dataFromFile.split('\\n');\r\n    const [canvasRule, ...drawRules] = arrayOfStrings;\r\n    const canvasArguments = canvasRule.split(' ');\r\n\r\n    if (canvasArguments[0] !== COMMANDS.CANVAS) {\r\n\r\n      errors = [...errors, {\r\n        id: ERRORS.noCanvasFound,\r\n        rule: 1,\r\n        meta: `${canvasArguments[0]} shoulde be equal to ${COMMANDS.CANVAS}`\r\n      }];\r\n\r\n    } else {\r\n      const { valid, width, height } = isValid(canvasArguments);\r\n      if (valid === VALID) {\r\n        this.setState({ canvasDimension: {\r\n          width: width, \r\n          height: height\r\n        } });\r\n      }\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      drawRules.forEach( (string, index)  => {\r\n        const drawingArguments = string.split(' ');\r\n        \r\n        if (drawingArguments[0] === COMMANDS.CANVAS) {\r\n          errors = [...errors, {\r\n            id: ERRORS.invalidFunction, \r\n            rule: index+2,\r\n            meta: 'canvas is already initialized'\r\n          }];\r\n        } else {\r\n          const { width, height } = this.state.canvasDimension;\r\n          const validationMessage = isValid(drawingArguments, width, height);\r\n        \r\n          if (validationMessage !== VALID) {\r\n            errors = [...errors, {...validationMessage, rule: index+2}];\r\n          }          \r\n        }\r\n      });\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      this.setState({ drawingRules: drawRules.map( ruleArguments => ruleArguments.split(' ') ) });\r\n    } else {\r\n      this.setState({ errors: errors });\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const { drawingRules, canvasDimension, errors } = this.state;\r\n    const canvas = drawingRules.length ? <Canvas rules={drawingRules} canvasDimension={canvasDimension}/> : <ErrorMessages errors={errors} />\r\n    return (\r\n      <div className=\"container\">\r\n        <FileLoadingButton checkData={this.checkData} />\r\n        {canvas}\r\n      </div>\r\n    );\r\n  } \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}